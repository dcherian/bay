#+TITLE: The wind-forced seasonal cycle of upper-ocean mixing in the Bay of Bengal
#+AUTHOR: D.A. Cherian, E.L. Shroyer, J.N. Moum
#+SETUPFILE: ~/org/notebook.org
#+LATEX_CLASS: dcarticle
#+OPTIONS: toc:nil

#+BEGIN_EXPORT latex
\setcounter{tocdepth}{2}
\renewcommand{\contentsname}{}
\renewcommand{\bibsection}{}
\newcommand{\ML}{_\text{ML}}
\newcommand{\niw}{^\text{in}}

% \vspace{-5em}
% \tableofcontents*

\begin{abstract}
We describe the seasonal cycle of turbulent mixing as observed from moored turbulence sensors (χpods) deployed on moorings distributed throughout the Bay of Bengal in the north Indian Ocean during 2014 and 2015.
We find that the seasonal cycle of near-surface turbulent diffusivity (top 45m) in the Bay follows the seasonal cycle in wind forcing.
In the thermocline between \SI{50}{m} and \SI{100}{m}, we repeatedly find that high mixing events coincide with the passage of surface-forced downward propagating near-inertial waves.
The months of March and April, a period of weak wind forcing and low near-inertial shear amplitude, are characterized by near-laminar flow and near-molecular temperature diffusivities for weeks at a time.
Both observations lead us to link the seasonal cycle of thermocline turbulence to the seasonal cycle of near-inertial energy flux in the Bay.
Finally, we combine all χpod observations to form seasonal-mean vertical profiles of diffusivity in the top 100m.
FINAL SENTENCE ABOUT WHY RESULTS MATTER.
\end{abstract}
#+END_EXPORT

* To do list: :noexport:
1. RAMA vs. NRL figure
   - [ ] bootstrap error bars on K_T
2. Need citation for paper with low turbulence measurements in the thermocline.
3. Need citation for Ritabrata's paper
4. Mixing associated with fresh water and salty water?
5. cite:Sardessai2007
6. cite:Vinayachandran2003 say that Ekman pumping pumps up nutrients to force a bloom during the NE monsoon. Maybe I can estimate this flux climatologically?
7. Need to look at climatological Chl-a. Observations are not in the right place for the bloom reported in cite:Vinayachandran2003,Vinayachandran2005

\newpage

* Introduction

The Bay of Bengal is the eastern semi-enclosed basin of the north Indian Ocean.
Large outflows from the Ganga, Brahmaputra, and Irrawady rivers and the mean precipitation maintain strong salinity stratification that is thought to inhibit turbulent mixing and in turn help maintain a relatively shallow oxygen minimum zone citep:Paulmier2009.
Yet mixing /is/ climatologically important.
For one, during the southwest monsoon (May - Sep) the net surface heat flux warms the near-surface ocean on average yet the sea surface temperature (SST) cools citep:Warner2016,Shenoi2002.
Second, the lack of overturning in the Bay implies that its long-time salt balance depends on the Summer Monsoon Current mixing up the relatively saltier Arabian Sea water it brings to the Bay citep:Vinayachandran2013.

The seasonality of wind forcing imprints seasonality on both turbulence (as we will show) and the Bay's circulation (our Figure ref:fig:spatial and citealp:Schott2002).
During the southwest monsoon (May-Sep, SW), precipitation over the Indian subcontinent as well as the Bay peaks and the southwesterly winds are strong.
Episodic strong cyclones that interrupt periods of weak winds characterize the months of October and November (southwest to northeast transition, SWNE).
Between December and February (northeast monsoon, NE), the winds reverse to be northeasterly and strengthen but are weaker than those during the SW monsoon.
The months of March and April are a period of extremely weak winds and weak flows north of 5N (northeast-southwest transition, NESW).
The East Indian Coastal Current spins up at the Bay's western boundary during both monsoons, flowing northward between May and October and then southward between December and April.
In addition, a strong mesoscale cyclone spins up to the east of Sri Lanka during the SW monsoon, termed the Sri Lanka Dome.
In the southwestern Bay, the Summer Monsoon Current threads a pathway between the Sri Lanka Dome to the north and an anticyclone to the south, transporting warm salty Arabian Sea water in to the Bay.
Meanders in the Summer Monsoon Current forced by Rossby waves that trace their origin back to wind fluctuations along the equator make the southwestern Bay a site of strong mesoscale activity during the southwest monsoon (our Figure ref:fig:spatial and citealp:Vinayachandran1998).

- update this paragraph
The seasonal cycle of winds implies a seasonal cycle of near-inertial energy flux $Π$ into the mixed layer.
Figure [[fig:spatial]] shows an estimate of this cycle calculated using a slab ocean mixed layer model with MERRA-2 10-m winds citep:Gelaro2017 and mixed layer depths from the Monthly Isopycnal Upper-Ocean Climatology with Mixed Layers (MIMOC) dataset citep:Schmidtko2013 following cite:Alford2003[fn::Also see Appendix A].
As expected, the SW monsoon sees near-inertial flux nearly throughout the Bay.
Perhaps surprisingly, the largest near-inertial fluxes are confined to latitudes south of 10N until the months of October and November where we see large input along the winter storm track in the Bay.
- These large fluxes are coincident with the region where Arabian Sea water is present in the top 250m...
The most striking aspect of Figure [[fig:spatial]] is the near-complete lack of near-inertial energy flux into the mixed layer during March (northern Bay) and April (northern & southern Bay).
Here we describe year-long observations of turbulence at multiple sites in the Bay (Figure ref:fig:map) and find that the seasonal cycle of winds and near-inertial energy flux described above is imprinted on both near-surface and thermocline turbulence.

#+NAME: fig:spatial
#+CAPTION: (top) Seasonal mean circulation in the Bay of Bengal for the year 2014. Color shows seasonal mean EKE from AVISO; vectors indicate surface currents from seasonally averaged 5-day OSCAR estimate citep:oscar,Bonjean2002. (bottom) Seasonal near-inertial energy input calculated using a slab ocean mixed layer model following cite:Alford2003 as detailed in Appendix A as well as MERRA-2 wind stress vectors.
#+ATTR_LATEX: :width \textwidth
[[file:images/paper1/spatial-maps.pdf]]

#+NAME: fig:map
#+ATTR_LATEX: :width 0.5\textwidth
#+ATTR_HTML: :style width:50%
#+CAPTION: (a) deployment locations of χpods as part of the ASIRI and EBoB programmes. (b, c) χpod deployment depths marked using horizontal lines on climatological T-S profiles from the Argo dataset citep:Roemmich2009 for RAMA and EBoB moorings, respectively.
[[file:images/paper1/map.pdf]]

** outline :noexport:
1. Monsoon seasonal variations blah blah
   1. wind stress + precip + near-surface heating + mention ISOs
   2. SWNE = cyclone season
   3. Use met data in top panel of Figure ref:fig:ramanrl and maps in Figure ref:fig:spatial
   4. Ocean circulation schematic required? Add arrows to Figure ref:fig:map.

2. Importance of mixing (and long-term mixing measurements) in the bay
   1. Something about OMZ
   2. Nutrient fluxes & seasonal cycle of Chl-A
   3. near-surface connections to MISOs
   4. Cyclones and heat-extraction from the Bay.

- cite:Vinayachandran2003: Primary production in the Bay is limited by nutrients, not light. (McGill 1973, Gomes et al 2000). The blooms in this paper are west of the EBoB array. There doesn't seem to be much action by the EBoB array but I need Chl-a data to really know.

* Observations
** χpod

A χpod is a self-contained instrument consisting of two fast-response FP-07 thermistors, a pitot-static tube for high-frequency speed measurements, pressure sensor, compass and accelerometers citep:Moum2009a,Moum2015.
Refinement over the years has resulted in a system that can return records of turbulent temperature fluctuations for up to a year or more.
The two thermistors on the χpod record temperature fluctuations at 100Hz.
Temperature gradient spectra are computed using 1 second intervals of data and are fit to the theoretical spectrum of cite:Kraichnan1968 in the viscous-convective range using an iterative procedure citep:Moum2009a.
This process yields both the turbulent dissipation of kinetic energy $ε$ and the turbulent dissipation of temperature variance $χ$ after using a relationship between $ε$ and $χ$ obtained by assuming $K_T = K_ρ$ i.e. that the turbulent diffusivities of temperature and density are equal, and that mixing efficiency $Γ = 0.2$ for stratified turbulence citep:Moum2009a.
Despite these assumptions, /in-situ/ comparisons between χpod data and ``standard'' vertical microstructure profiles are favorable citep:Perlin2012,Pujiana2018.
Turbulent temperature diffusivity $K_T$, turbulent heat flux $J_q^t$ and turbulent salt flux $J_s^t$ are estimated from a time series of $χ$ using
\begin{equation}
        K_T = \frac{χ/2}{T_z}; \quad J_q^t = - ρ_0\, c_p\, K_T\, T_z; \quad J_s^t = ρ_0 \, K_T \, S_z
\end{equation}
where $T_z, S_z$ are mean background temperature and salinity gradients.
Again, we have assumed that high Reynolds number geophysical turbulence mixes all scalars at the same rate so that $K_T = K_S$.
Inferring $K_T, J_q$ when temperature stratification $T_z$ (subscript $z$ indicates \(z\)-derivative) is sufficiently small can be problematic since these quantities are inversely proportional to $T_z^2$ and $T_z$ respectively.
Our standard procedure is to mask out $χ$ estimates when $T_z < \SI{1e-3}{\celsius\per\metre}$ which can occur frequently with near surface χpods on RAMA moorings that are frequently in the mixed layer.

** The 2014-2015 Bay of Bengal deployment

As part of the U.S. Office of Naval Research's Air Sea Interaction Regional Initiative (ASIRI), Naval Research Laboratory's (NRL) Effects of Bay of Bengal Freshwater Flux on Indian Ocean Monsoon (EBoB) and the Indian government's Ocean Mixing and Monsoons (OMM) projects, a number of χpods were deployed on moorings throughout the Bay (Figure ref:fig:map).
On the Research Moored Array for African-Asian-Australian Monsoon Analysis and Prediction (RAMA) moorings at 12N, 90E (2014, 2015) and 15N, 90 E (2015 only), χpods were deployed at 15m, 30m (2014, 2015) and 45m (2015 only).
These units were usually either in or near the base of the mixed or barrier layers and recorded the wind-forced near-surface cycle of turbulence (Figure [[fig:map]]).

- add proper dates
χpods were also deployed as part of NRL's EBoB array east of Sri Lanka during 2014 and some returned data up to Jan 2015.
The EBoB χpods ended up at a variety of depths but most were in the main thermocline (Figure [[fig:map]]b and citealp:Wijesekera2016a).
These moorings experienced significant blowdown during periods of high currents, up to 50m for a month or two at some moorings, complicating the interpretation of parts of the χpod record.
This region experiences both a significant seasonal cycle in mesoscale EKE associated with the spinup and spindown of the Summer Monsoon Current and a strong seasonal cycle in near-inertial wave input (Figure ref:fig:spatial).
The seasonal cycle of mixing observed here in the southern Bay is quite different relative to that observed by the near-surface χpods on the RAMA moorings in the northern Bay.

In addition, the OMM/WHOI mooring at 18N was heavily instrumented with χpods.
This location is relatively unique because it experiences a lot of freshwater influence from the Ganga-Brahmaputra runoff and the seasonal cycle differs from that at the moorings summarized here.
The seasonal cycle from the OMM/WHOI measurements are presented elsewhere citep:ThakursubmittedGRL.
* Results
** A comparison of near-surface and thermocline mixing
<<sec:ramanrl>>

#+NAME: fig:rama
#+CAPTION: RAMA 12N: Time series of (a) wind stress and local wind-forced near-inertial energy flux; (b) daily averaged $K_T$ and fraction daily coverage; (c) turbulent heat and salt fluxes $J_q^t, J_s^t$. ADD MLD?
[[file:images/paper1/rama12.pdf]]

#+NAME: fig:nrl
#+CAPTION: NRL5: Time series of (a) wind stress and local wind-forced near-inertial energy flux; (b) daily averaged $K_T$ and fraction daily coverage; (c) turbulent heat and salt fluxes $J_q^t, J_s^t$; (d) Near-inertial shear variance and fraction of day where Richardson number Ri < 5.
[[file:images/paper1/nrl5.pdf]]

We begin by contrasting two year-long records, one from the RAMA 12N (12N, 90E) mooring at 15m and the other from the NRL5 mooring (8N, 88.5E) at 104m (Figures ref:fig:rama and ref:fig:nrl).
The two records are at approximately the same longitude.
Figures ref:fig:rama and ref:fig:nrl show daily averaged turbulence quantities as well as daily averaged surface forcing at both moorings.
As mentioned earlier, frequent masking of inferred $K_T, J_q^t, J_s^t$ in mixed layer χpod records means that the term ``daily averages'' is not completely accurate.
Accordingly we show the fraction of the day with valid $K_T$ estimates in gray in Figure [[fig:rama]]b and [[fig:nrl]]b.
Consider the month of February in Figure [[fig:rama]]b.
During weak wind periods the 15m χpod at RAMA 12N (Figure [[fig:rama]]) appears to be within the night-time convective boundary layer whereas during the daytime, solar heating builds up stratification at 15m.
The ``daily average'' is really a ``daytime average'' estimate of $K_T$ and fraction daily coverage is approximately 50%.

The 15m χpod at RAMA 12N recorded a distinct seasonal cycle that mirrors the seasonal cycle in surface wind stress (Figure [[fig:rama]]a).
cite:Warner2016 summarized this record previously and so we limit ourselves to a brief description here.
During the northeast monsoon, wind stress $τ$ of about \SI{0.1}{N/m²} drives turbulence with a daily averaged temperature diffusivity of \SI{1e-4}{m²/s}.
By mid-February the outflow from the Irrawady river arrives at the mooring and the mixed layer shallows to approximately \SI{10}{m}.
The χpod at \SI{15}{m} sees increased turbulent heat flux $J_q^t = ρ c_p K_T T_z$ and turbulent salt flux $J_s^t = ρ K_T S_z$ during this period (Figure [[fig:rama]]c) while the deeper χpod at 30m, in the barrier layer, sees almost no heat and salt flux during this period (not shown).
By March, the weakening wind stress field along with intense surface heating builds up near-surface stratification.
The mixed layer shoals to a depth shallower than 15m and the χpod senses little turbulence.
$K_T$ decreases to \SI{1e-5}{m²/s} associated with near-negligible turbulent heat and salt fluxes.
By May, the strong winds of the southwest monsoon force high mixing, a deeper mixed layer, a hundredfold increase in diffusivity $K_T$ and significant increases in turbulent fluxes of both heat and salt.
Tropical cyclones and storms during the months of October & November drive a 2-3 order of magnitude increase in diffusivity.

The seasonal cycle of thermocline turbulence at 8°N, 88.5°E (NRL5) is significantly different from that of near-surface turbulence at 12N (Figure ref:fig:nrl).
Here sustained high mixing is observed between the months of May and October --- a period of energetic mesoscale activity as well as large near-inertial energy input $Π$ in the southwestern Bay (Figures ref:fig:spatial and [[fig:nrl]]a).
In Figure [[fig:nrl]]a, a local estimate of near-inertial energy flux into the mixed layer $Π$ is computed as $u\ML⋅τ$ using the topmost velocity bin at 8m depth as representative of mixed layer velocity $u\ML$ and daily average $τ$ from Tropflux citep:Kumar2012.
Outside May-October, $K_T$ is consistently below the canonical thermocline value of \SI{1e-5}{m²/s}.
Strikingly, the χpods observe a near-laminar thermocline with near-molecular values of $K_T$ during the month of April.
This observation is consistent with both finestructure- and microstructure-based profiles of turbulence quantities in the Bay.
Finestructure estimates of dissipation estimated using LADCP shear profiles for the I01 section in the Bay of Bengal yield $K_T ≈ \SI{1e-6}{m²/s}$ citep:Kunze2006.
cite:Jinadasa2016 report vertical profiles of $N²$ and turbulent kinetic energy dissipation rate $ε$ from which we infer minimum diffusivity
\begin{equation}
K_T^\text{min} ≈ K_ρ^\text{min} = \frac{Γε^\text{min}}{N²} ≈ \frac{0.2 × \SI{1e-9}{W/kg}}{\SI{1e-3}{s^{-2}}}  ≈\SI{2e-7}{m^2/s},
\end{equation}
assuming again that mixing efficiency $Γ = 0.2$ citep:Gregg2018.

The seasonal cycle in thermocline mixing at 8°N roughly parallels a seasonal cycle in wind stress, near-inertial wind power input and thermocline shear.
Between May and October, SSH anomalies associated with meanders of the Summer Monsoon Current and the wind-forced Sri Lanka Dome propagate through the array and elevate total shear in the water column citep:Wijesekera2016a.
In addition to enhanced shear associated with mesoscale features, there is a clear seasonal cycle in near-inertial shear variance in the thermocline with a seasonal low in April that mirrors the seasonal cycle of near-inertial energy flux at the surface (Figures ref:fig:spatial, [[fig:nrl]]a,d).
This near-inertial variability accounts for roughly 40-60% of total shear variance between \SI{100}{m} and \SI{150}{m} with occasional peaks of 70-80%
The maximum observed diffusivity and maximum observed turbulent fluxes are associated with a particularly strong set of near-inertial wave packets that forced significantly enhanced turbulence at the χpod's depth (July 23 -- August 7, Figure [[fig:nrl]]b,c).
Coarse sampling limits our ability to confidently infer a seasonal cycle in the Richardson number $\Ri$ estimated using 20m-scale shear and $N²$ sampled hourly.
Instead we show a time series of the fraction of day with $\Ri < 5$ expecting that χpods are more likely to observe turbulence when relatively lower values of $\Ri$ occur more frequently (Figure [[fig:nrl]]d).
The arrival of Arabian Sea water in June reduces the stratification and we observe a corresponding increase in occurrences of hours with $\Ri < 5$ up until when stratification rises again in December.
This period of relatively low $\Ri$ coincides with elevated diffusivity $K_T$.
We leave a more detailed examination of the mesoscale, the near-inertial wave field and associated mixing in the Bay's thermocline at 8N to a future paper.

# 1. High NIW shear during NE monsoon but higher stratification presumably suppresses turbulence.
# 2. Are there independent M2 soliton or is the inertial peak losing energy to freely propagating waves.

** An approximate basin-wide vertical profile of diffusivity $K_T$
<<sec:profile>>

There exist nine more approximately year-long records similar to the two described previously and qualitatively much of the seasonal cycle is similar to that represented above.
Rather than discuss them individually, we use all available χpod observations to construct an approximate seasonally averaged vertical profile of hourly averaged temperature diffusivity $K_T$ as follows (Figure ref:fig:vert):

1. We label every averaged $K_T$ measurement with the density value of the parcel observed as well as the depth of measurement. Those measurements made in either the mixed layer or barrier are instead labelled with `ML' and `BL' respectively.
2. We bin these labelled measurements by `ML', `BL' or by density with bin edges [1018, 1021, 1022, 1022.5, 1023, 1023.5, 1024.25, 1029] \SI{}{kg/m^3}.
3. For each season, we construct a probability density function (PDF) of $K_T$ for each bin and calculate the mean and standard deviation of the depths of measurement.
4. The PDFs are now presented at the mean depth of the density bin yielding the vertical profile in Figure ref:fig:vert. Each PDF is also labelled with either `ML', `BL', or the mean density in each bin as appropriate. The vertical bars indicate the standard deviation of depths of observation. Circles and triangles indicate medians and means respectively. The horizontal line at the base of each PDF spans the range between the minimum observed value and the $99^{\text{th}}$ percentile.

Some considerations must be kept in mind while interpreting Figure ref:fig:vert.
First, our definition of seasons need not line up perfectly with periods of relatively high or relatively low winds at every instrument (e.g. Figures ref:fig:rama and ref:fig:nrl).
Second, Figure ref:fig:vert ignores all spatial variability.
The occasional presence of double peaked distributions is the sign of measurements from different regions with differing variability being combined.
Third, our thermocline estimates of mean diffusivity are likely over-estimates of the basin-wide mean between January and April since near-inertial input is significantly larger south of 10N during this period assuming that the slab model prediction in Figure ref:fig:spatial is a good qualitative estimate of seasonal near-inertial flux input.

- Figure references in parenthesis
Despite these caveats, Figure ref:fig:vert presents a useful summary of observed mixing in the Bay and shows that the two records discussed in Section ref:sec:ramanrl are representative.
We see that $K_T$ is always surface intensified and that the northeast and southwest monsoons are periods of relatively high mixing in the top 100m at all observed locations.
Episodically enhanced mixing associated with storms is also observed during October and November.
The transition months of March and April exhibit relatively weaker mixing by an order of magnitude at all observed locations.
During these months, we infer near-molecular values of mixing in multiple χpods deployed in the thermocline as part of the NRL array, just as in Figure [[fig:nrl]]b.
Note that mean values of $K_T$ were $≤ \SI{1e-5}{m²/s}$ for depths deeper than \SI{50}{m} during March and April in Figure ref:fig:vert.
We attribute this to near-complete absence of near-inertial energy input in the southern Bay during April (Figure ref:fig:spatial) and corresponding low levels of near-inertial shear in the southwestern Bay's thermocline (Figure [[fig:nrl]]d).

# Third, given that near-inertial energy input from the wind is significantly larger south of 10N (with the exception of the Oct-Nov storm track, Figure [[fig:spatial]]); and that near-inertial energy propagates equatorward, it is possible that the mixing observed in the thermocline by the EBoB array is larger than what might be representative for the interior Bay north of 10N[fn::should this be moved to the next section?].
# This last point might not be applicable during the months of March and April, which see some along-coast winds in the northern Bay and larger input than the southern Bay (Figure [[fig:spatial]]).
# The mean values below \SI{40}{m} in Figure ref:fig:vert are possibly overestimates of the basin-wide mean.

#+NAME: fig:vert
#+CAPTION: Vertical profile of hourly averaged diffusivity $K_T$ formed by combining all available χpod data in density bins (Section [[sec:profile]]).
file:images/paper1/bay-KT-vert-profile-label.pdf

#+NAME: fig:vert
#+CAPTION: Vertical profile of means of hourly averaged diffusivity $K_T$ along with bootstrap 95% confidence intervals.
file:images/paper1/mean-profile.pdf

* Discussion

Year-long observations of turbulence at multiple sites in the Bay of Bengal (Figure [[fig:map]]) using a moored turbulence platform χpod reveal a seasonal cycle in upper-ocean turbulence.
The seasonal cycle of near-surface turbulence follows from a seasonal cycle in direct wind stress forcing.
The seasonal cycle of thermocline turbulence likely follows from a seasonal cycle of near-inertial energy.
We find that high mixing events in the thermocline coincide with enhanced near-inertial wave shear and the seasonality in near-inertial input as well as near-inertial shear variance is clear (Figures ref:fig:spatial and [[fig:nrl]]a,d).
Our most striking observation is the near-complete lack of mixing in the southwestern Bay's thermocline during the month of April --- a period of low winds, low near-inertial energy flux and low near-inertial shear in the thermocline.

The significance of such low observed mixing is unclear.
Low thermocline diffusivities are predicted by the finestructure internal-wave scaling of cite:Henyey1986 and have been observed previously at low latitudes: $K_ρ ≈ \SIrange[fixed-exponent=-6, scientific-notation=fixed,range-units=brackets]{1e-6}{3e-6}{m^2/s}$ for latitudes south of 10N in cite:Gregg2003.
However, our lowest observed values during March, April at approximately \SIrange{80}{100}{m} depths are lower than those observations.
- I'm currently working on quantifying the seasonal cycle of internal-waveband variance and comparing it to GM.
These observations agree with finestructure shear/strain estimates that use LADCP data citep:Kunze2006

Climate model simulations that account for the latitudinal variation noted in cite:Gregg2003 use a minimum background $K_T ≈ \SI{1e-6}{m^2/s}$ at the equator, an order of magnitude higher than the near-molecular mean $K_T$  we observe between \SIrange{80}{100}{m} at 8°N in the Bay during March and April (for example citealp:Jochum2009,Danabasoglu2012).
Improved upper ocean state representation in the CFSv2 operational forecast model run by the Indian Institute of Tropical Meteorology has been shown to improve rainfall forecasts over central India citep:Koul2018.
cite:Chowdary2016a show this model to be biased cold in the top 80m, biased warm below 100m and have excessive vertical turbulent heat fluxes in the top \SI{200}{m} (/annual mean/).
They link the high mixing bias to excess shear and reduced stratification in the model.
Our observations would suggest that the background mixing in the model might also need to be lowered.
Yet at such low background levels, numerical mixing would dominate.
- I haven't managed to find a paper that relates bias in Jun-Sep predictions to errors in March / April ocean state.
- I don't know whether the IITM model uses the latitudinal variation of background mixing. Frank Bryan at NCAR told me that it's pretty ad-hoc in most climate models.

** Mixing at 8°N along the Summer Monsoon Current (SMC)           :noexport:

#+NAME: fig:smc
#+CAPTION: Vertical profiles binned as in Figure ref:fig:vert and averaged along 8N (NRL3,4,5). Turbulent heat and salt fluxes are important only during May-Nov when high salinity Arabian Sea water is present closer to the surface reflecting the presence of the Summer Monsoon Current / Sri Lanka Dome. High values at 30m are when the χpod is at the base of the mixed layer. MLD is unknown. Axes limits in the last two panels are set so as to focus on the thermocline and avoid the high values near the base of the mixed layer.
[[file:../images/paper1/smc-vertical-flux.pdf]]

The Summer Monsoon Current is the major pipeline for the saline water input necessary to maintain long-term salt balance in the Bay --- see the rise in salinity at around July 1 in Figure [[fig:ramanrl]]g (also citealp:Jain2017,Vinayachandran2013).
Elevated turbulent diffusivity associated with this current is possibly an important contributor to the basin-wide salt budget.
So motivated, we examine the χpods deployed along 8N --- seasonal-mean surface circulation from OSCAR shows this to be the mean latitude of the Summer Monsoon Current (Figure ref:fig:spatial).
Again, we use the methodology of Section [[sec:profile]] to average the turbulent diffusivity and turbulent fluxes in isopycnal bins and construct the seasonal-mean vertical profiles of $K_T, J_q^t$, and $J_s^t$ shown in Figure [[fig:smc]].

As expected, one sees a relative peak in turbulent heat and salt fluxes at depth during the southwest monsoon.
More surprising is the peak salt flux at approximately 60m depth in the density bin (1022.0, 1022.5] \SI{}{kg/m³} that occurs during October and November.
This salt flux coincides with both a set of $M_2$ nonlinear internal tides passing through the NRL3 mooring at 8N, 85.5E, 60m during October and a burst of near-inertial wave energy around Oct-17.
The clockwise shear variance is enhanced at $-f-M_2$.
Again, we see the combination of near-inertial waves and internal nonlinear internal tides modulating turbulence in the Bay's thermocline.
# This particular χpod was in the salinity-stratified isothermal layer and so, the heat fluxes are relatively smaller while the salt flux is relatively larger.

- something about implied flux divergence in Figure [[fig:smc]]. I'm confused. This is an imperfectly sampled profile though.
- Estimate E-P at surface and show that?
- do I need to add a figure showing time series of $J_q^t, J_s^t, |u_z|$ + one panel showing rotary velocity, shear spectrum with shifted peaks?

** Lat/lon variations :noexport:
Some general patterns from Figure ref:fig:spatial.
- RAMA 15N, RAMA 12N are basically consistent modulo freshwater influence from Irrawady.
- NRL stuff is harder to compare because of blowdown. This is motivation for making a vertical profile, binning by isopycnal = next section.
  - Basically, deeper χpods start to see quite low mixing.
  - Higher mixing generally during SW monsoon. Coincides with intense shear associated with SLD followed by an anticyclone citep:Wijesekera2016a. See high EKE in red.
  - Also, strong wind events seem to force NIW packets that propagate downward into thermocline forcing mixing (How many events do I see in all the moorings?)
  - West-East gradients in mesoscale activity, wind forcing
* Conclusions :noexport:
Multiple year-long observations using χpods show that the strong seasonal cycle of wind forcing imprints itself on both near-surface and thermocline turbulence in the Bay of Bengal, influencing the latter through downward propagating near-inertial waves.
- something about really low mixing during NESW

** Next steps = next papers?                                      :noexport:
- Seasonal cycle in internal wave energy?
- Is this recoverable from internal wave - based parameterizations?
  - i.e. does the IW energy level _in the thermocline_ drop during the transition?
  - How do GM + GM-related parameterizations relate to this question? Whalen's dataset?

* Acknowledgments

Funding: ONR YIP, ASIRI

NOAA/PMEL; Sonya Brown

NRL, Hemantha

Johannes Becherer, Sally Warner, Pavan Vutukur, Kerry Latham, Craig van Appledorn.

something about data embargo / availability

* Appendix A: Near-inertial input calculation

Near-inertial energy input $Π$ is calculated following [[cite:Alford2003]]'s spectral solution of the cite:Pollard1970 slab ocean mixed layer using wind speeds from the MERRA-2 reanalysis citep:Gelaro2017 and monthly mean mixed layer depth from the MIMOC climatology citep:Schmidtko2013. There are flaws associated with this calculation citep:Plueddemann2006 but we believe Figure ref:fig:spatial captures the qualitative large-scale spatial variation of $Π$. MERRA-2 does not capture the large wind stresses evident in the TropFlux compilation citep:PraveenKumar2012. However, since TropFlux data is available at daily resolution one cannot calculate the near-inertial input north of approximately 10N, where the inertial period nears 2 days, the Nyquist frequency of the TropFlux winds.

* Appendix B: Treating the χpod as a profiler

* Supplementary Material

1. Table of seasonal means/medians per mooring & also vertical profile.

* References

[[bibliography:bibtexLibrary.bib]]
bibliographystyle:ametsoc2014

\newpage

* old stuff :noexport:
#+NAME: fig:ramanrl
#+ATTR_HTML: :style width:90%
#+CAPTION: (a) Wind stress $τ$ and net surface heat flux $J_q^0$  at RAMA 12N. (b, d) Turbulent heat and salt fluxes $J_q^t, J_s^t$ at RAMA 12N, 15m and NRL5 8N, 105m respectively. (c) Turbulent diffusivity at RAMA 12N, 15m and NRL5 8N, 105m. (e) Wind stress $τ$ and near-inertial energy input $Π$ at NRL5 8N. (f) Fraction of day where we have good turbulence observations. (g, h) Daily average temperature stratification $∂T/∂z$ and salinity $S$ respectively. (i) Shear variance in near-inertial, $M_2$ and $M_4$ frequency bands at NRL5, 8N.
[[file:images/paper1/rama12.pdf]]

* Figures :noexport:
** Figure 1: Seasonal patterns of EKE, surface currents, wind & NIW input

#+BEGIN_SRC ipython :session :results none
import cartopy.crs as ccrs

isodepth = bay.calc_isohaline_depth(34.75, split=True)

if 'oscar' not in locals():
    oscar = (xr.open_mfdataset('/home/deepak/work/datasets/oscar/oscar_vel*.nc',
                               concat_dim='time')
             .sel(latitude=slice(bay.region['lat'].stop,
                                 bay.region['lat'].start),
                  longitude=bay.region['lon'],
                  time=slice('2013-12-01', '2014-11-30')))
    oscar = (oscar
             .groupby(oscar.time.monsoon.splitlabels).mean('time')
             .load().squeeze()
             .sortby('latitude'))

if 'ssha' not in locals():
    ssha = (xr.open_dataset('../datasets/ssh/'
                            + 'dataset-duacs-rep-global-merged-allsat'
                            + '-phy-l4-v3_1522711420825.nc')
            .sel(time=slice('2013-12-01', '2014-11-30'))
            .load())
    ssha['EKE'] = 0.5 * (ssha.ugosa**2 + ssha.vgosa**2)
    eke = (ssha.EKE.groupby(ssha.EKE.time.monsoon.splitlabels)
           .mean(dim='time'))

if 'tropflux' not in locals():
    tropflux = (xr.open_mfdataset('../datasets/tropflux/tau*_tropflux_1d_*.nc')
                .drop('tau')
                .sel(time=slice('2013-12-01', '2014-11-30'),
                     latitude=slice(2, 25),
                     longitude=slice(78, 96))
                .load())
    tropflux = (tropflux.groupby(tropflux.time.monsoon.splitlabels)
                .mean(dim='time'))

if 'sss' not in locals():
    aq = dcpy.oceans.read_aquarius()
    sss = aq.sss.sel(latitude=slice(2, 25),
                     longitude=slice(78, 96))
    sss = (sss.groupby(sss.time.monsoon.splitlabels)
           .mean(dim='time')
           .load())

if 'wind_input' not in locals():
    wind_input = xr.open_dataset('~/bay/estimates/merra2-wind-power-input-2014.nc')
    mean_niw = (wind_input.groupby(wind_input.time.monsoon.splitlabels).mean('time'))
    niw = (wind_input.wind_input
           .sel(time=slice('2013-12-01', '2014-11-30'))
           .groupby(wind_input.time.monsoon.splitlabels)
           .mean('time'))
    # .apply(xrsp.integrate.trapz, coord='time')

# if 'true_input' not in locals():
#     true_input = (xr.open_dataset('~/bay/estimates/mooring-near-inertial-input.nc')
#                   .sel(time=slice('2014-01-01', '2014-11-30'))
#                   .true_flux)
#     true_input.values[np.isnan(true_input.values)] = 0
#     grp = true_input.groupby(true_input.time.monsoon.splitlabels)
#     true_input = (true_input
#                   .groupby(true_input.time.monsoon.splitlabels)
#                   .apply(xrsp.integrate.trapz, coord='time'))
#     true_input = true_input.where(np.abs(true_input) > 0)

osc = oscar.sel(latitude=slice(None, None, 2),
                longitude=slice(None, None, 3))

def common(ax):
    ax.set_xticks(range(80, 96, 4))
    ax.set_yticks(range(4, 24, 4))
    bay.plot_coastline(ax)
    ax.set_extent([80, 94, 4, 24])
    # bay.mark_moors(ax=ax, color='black', colortext='white',
    #                fontsize=7, markersize=8)


with mpl.style.context({'axes.titlesize': 9,
                        'axes.labelsize': 9,
                        'xtick.labelsize': 9,
                        'ytick.labelsize': 9,}):
    f, ax = plt.subplots(3, 5, sharex=True, sharey=True,
                         subplot_kw=dict(projection=ccrs.PlateCarree()),
                         constrained_layout=True)
f.set_size_inches(7, 6.5)
f.set_constrained_layout_pads(w_pad=0/72, h_pad=0/72)
f.set_constrained_layout(True)
[common(aa) for aa in ax.flat]

axes = dict()
if ax.shape[0] > ax.shape[1]:
    axes['oce'] = dict(zip(bay.splitseasons, ax[:, 0]))
    axes['atm'] = dict(zip(bay.splitseasons, ax[:, 1]))
    axes['iso'] = dict(zip(bay.splitseasons, ax[:, 2]))
else:
    axes['oce'] = dict(zip(bay.splitseasons, ax[0, :]))
    axes['atm'] = dict(zip(bay.splitseasons, ax[1, :]))
    axes['iso'] = dict(zip(bay.splitseasons, ax[2, :]))

for season in bay.splitseasons:
    heke = (eke.sel(monsoon=season)
            .plot.contourf(ax=axes['oce'][season],
                           x='longitude', y='latitude',
                           cmap=mpl.cm.gist_heat_r,
                           levels=np.linspace(0, 0.30, 20),
                           add_colorbar=False))

    hoscar = axes['oce'][season].quiver(osc.longitude, osc.latitude,
                                        osc.u.sel(monsoon=season),
                                        osc.v.sel(monsoon=season),
                                        width=0.008, scale=2.5)

    # hsss = (sss.sel(monsoon=season)
    #         .plot.contour(ax=axes['oce'][season],
    #                       x='longitude', y='latitude',
    #                       levels=[29, 30, 31, 32, 33, 34],
    #                       colors='k', linewidths=1))
    # hlab = axes['oce'][season].clabel(hsss, fontsize='smaller', fmt='%2.0f')
    # [hh.set_backgroundcolor('lightgray') for hh in hlab]

    kwargs = dict(cmap=mpl.cm.GnBu, vmin=0, vmax=1.2)
    hniw = ((niw*1000).sel(monsoon=season)
            .plot.contourf(ax=axes['atm'][season], levels=40,
                           add_colorbar=False, **kwargs))
    ((niw*1000).sel(monsoon=season)
     .plot.contour(ax=axes['atm'][season], levels=[2.0, 4, 8],
                   colors='w', add_colorbar=False, linewidths=0.7))

    # _, lon, lat = xr.broadcast(true_input.sel(monsoon=season),
    #                            true_input.lon, true_input.lat)
    # htrue = axes['atm'][season].scatter(
    #     lon.values.ravel(), lat.values.ravel(),
    #     c=(true_input/1000).sel(monsoon=season).values.ravel(),
    #     edgecolor='darkgray', linewidths=1, **kwargs)

    htau = axes['atm'][season].quiver(niw.lon[::2], niw.lat[::2],
                                      mean_niw.taux.sel(monsoon=season)[::2, ::2],
                                      mean_niw.tauy.sel(monsoon=season)[::2, ::2],
                                      scale=0.4, width=0.006)

    if season == 'NE':
        keykwargs = dict(coordinates='axes', labelpos='S',
                         fontproperties=dict(size=8))
        axes['oce']['NE'].quiverkey(hoscar, 0.2, 0.96, 0.5, '0.5 m/s',
                                    ,**keykwargs)

        axes['atm']['NE'].quiverkey(htau, 0.25, 0.96, 0.1, '0.1 N/m²',
                                    ,**keykwargs)

    axes['oce'][season].set_title(season)

    hdl = (isodepth.sel(monsoon=season)
           .plot.contour(x='lon', y='lat', ax=axes['iso'][season],
                         levels=[10, 50, 75, 100, 150, 200],
                         colors='k', robust=True, add_colorbar=False,
                         transform=ccrs.PlateCarree()))
    axes['iso'][season].clabel(hdl, fmt='%d', fontsize=8)

    # [axes[row][season].text(0.05, 0.875, season,
    #                         transform=axes[row][season].transAxes,
    #                         color='k', zorder=10)
    # for row in axes]


def clean_axis(ax):
    ax.set_xlabel('')
    ax.set_ylabel('')

[clean_axis(aa) for aa in ax.flat]
[bay.plots.mark_moors_clean(ax=aa) for aa in ax[:-1, :].flat]
[axes['atm'][aa].set_title('') for aa in axes['atm']]
[axes['iso'][aa].set_title('') for aa in axes['iso']]
[aa.set_xlabel('Longitude') for aa in ax[-1, :]]
[aa.set_ylabel('Latitude') for aa in ax[:, 0]]

cbar_kwargs={'orientation': 'horizontal',
             'aspect': 12,
             'shrink': 0.6}
hcb1 = plt.colorbar(heke, ax=ax[-1, :3], label='EKE [m²/s²]', **cbar_kwargs,
                    anchor=(0.25, 1))
hcb2 = plt.colorbar(hniw, ax=ax[-1, 2:], label='Near-inertial wind input $Π$ [mW/m²]',
                    ,**cbar_kwargs, anchor=(0.8, 1))
hcb1.set_ticks(np.arange(0, 0.31, 0.05))
hcb2.set_ticks(np.arange(0, 1.21, 0.2))

# plt.subplots_adjust(left=0.080, right=0.99)
# plt.tight_layout()
plt.savefig('images/paper1/spatial-maps.pdf', transparent=False)

# clim = (aq.sss.sel(longitude=slice(75, 98),
#                    latitude=slice(0, 24))
#         .groupby('time.month').mean(dim='time'))
# clim.plot(col='month', col_wrap=3, robust=True)
# hc = clim.plot.contour(col='month', col_wrap=3, levels=np.arange(29, 36), Colors='k')
# plt.clabel(hc, fmt='%2.0f')
# pptlevels=[600,  1200, 1800]
# ppt = trmm.sel(monsoon=season).precipitation
# hppt = (ppt.where(ppt > pptlevels[0]-2)
#         .plot.contourf(ax=axes[season], x='lon', y='lat',
#                        levels=pptlevels,
#                        cmap=ppt_cmap, zorder=4,
#                        add_colorbar=False))
# (ppt.where(ppt > pptlevels[0]-2)
#  .plot.contour(ax=axes[season], x='lon', y='lat',
#                levels=pptlevels, zorder=4,
#                colors=raincolor, linewidths=1))

# cmap = (sns.blend_palette(
#     [[0.988235, 0.988235, 0.992157],
#      [0.811765, 0.831373, 0.886275],
#      [0.627451, 0.678431, 0.788235],
#      [0.521569, 0.615686, 0.729412],
#      [0.584314, 0.698039, 0.749020],
#      [0.690196, 0.803922, 0.772549],
#      [0.847059, 0.905882, 0.796078],
#      [1.000000, 0.980392, 0.756863],
#      [0.996078, 0.839216, 0.447059],
#      [0.996078, 0.670588, 0.286275],
#      [0.992157, 0.501961, 0.219608],
#      [0.968627, 0.270588, 0.152941],
#      [0.835294, 0.070588, 0.125490],
#      [0.674510, 0.000000, 0.149020],
#      [0.509804, 0.000000, 0.149020]],
#     n_colors=21, as_cmap=True))

#+END_SRC

** Figure 2: map + depths on argo climatology

#+BEGIN_SRC ipython :session
import cartopy.crs as ccrs

with plt.rc_context({'font.size': 11,
                     'xtick.labelsize': 12,
                     'ytick.labelsize': 12,
                     'axes.facecolor': 'white',
                     'savefig.transparent': False}):

    f = plt.figure(constrained_layout=True)
    f.set_size_inches((4.75, 8))

    n=3
    n0=2
    # gs = mpl.gridspec.GridSpec(2, n, figure=f)
    # ax1 = f.add_subplot(gs[:, :n0], projection=ccrs.PlateCarree())
    # ax2 = f.add_subplot(gs[0, n0:])
    # ax3 = f.add_subplot(gs[1, n0:])

    gs = mpl.gridspec.GridSpec(n, 2, figure=f)
    ax1 = f.add_subplot(gs[:n0, :], projection=ccrs.PlateCarree())
    ax2 = f.add_subplot(gs[n0:, 0])
    ax3 = f.add_subplot(gs[n0:, 1])

    bay.make_labeled_map(ax=ax1)
    bay.mark_χpod_depths_on_clim(ax=[ax2, ax3])

    dcpy.plots.label_subplots([ax1, ax2, ax3], x=0.025, y=0.05,
                              labels=['', 'RAMA', 'EBoB'])

    [tt.set_rotation(30) for tt in ax1.get_xticklabels()]
    ax3.set_ylabel('')
    ax3.set_yticklabels([])

    f.savefig('images/paper1/map.pdf', bbox_inches='tight')
#+END_SRC
[[file:images/paper1/map.pdf]]

** Figure 3: Vertical profile of K_T distributions

#+BEGIN_SRC ipython :session :results none
import bay
bay = importlib.reload(bay)

if 'wind_input' not in locals():
    wind_input = xr.open_dataset('~/bay/estimates/merra2-wind-power-input-2014.nc')
    niw = (wind_input.wind_input
           .sel(time=slice('2013-12-01', '2014-11-30'))
           .groupby(wind_input.time.monsoon.labels)
           .mean(xr.ALL_DIMS))

if 'tropflux' not in locals():
    tropflux = (xr.open_mfdataset('../datasets/tropflux/tau*_tropflux_1d_*.nc')
                .drop('tau')
                .sel(time=slice('2013-12-01', '2014-11-30'),
                     latitude=slice(2, 25),
                     longitude=slice(78, 96))
                .load())
    tau = (tropflux.groupby(tropflux.time.monsoon.labels)
           .mean(xr.ALL_DIMS))

    taustd = (tropflux.groupby(tropflux.time.monsoon.labels)
              .std(xr.ALL_DIMS)
              .rename({'taux': 'taux_std', 'tauy': 'tauy_std'}))

    netflux = (xr.open_mfdataset('../datasets/tropflux/netflux*_tropflux_1d_*.nc')
                .sel(time=slice('2013-12-01', '2014-11-30'),
                     latitude=slice(2, 25),
                     longitude=slice(78, 96))
                .load())
    netflux['heat'] = netflux.netflux.where(netflux.netflux > 0)
    netflux['cool'] = netflux.netflux.where(netflux.netflux < 0)
    netflux = (netflux.groupby(netflux.time.monsoon.labels)
                .mean(xr.ALL_DIMS))

    tropflux = xr.merge([tau, netflux, taustd])

if 'trmm' not in locals():
    trmm = dcpy.oceans.read_trmm()
    # convert from mm/day to m/s
    P = trmm.precipitation.sel(**bay.region).load()
    P = P.groupby(P.time.monsoon.labels).mean(xr.ALL_DIMS)
    P.attrs['units'] = 'mm/day'

moors = ['RAMA12', 'RAMA15', 'NRL1', 'NRL2', 'NRL3', 'NRL4', 'NRL5']

f, axx = plt.subplots(2, 4, sharex='row', sharey='row',
                     gridspec_kw={'height_ratios': [1, 6]})
ax = dict(zip(bay.seasons, axx[0, :]))

bay.make_vert_distrib_plot('KT', label_moorings=False, f=f, ax=axx[1, :],
                           adjust_fig=False)

barargs = dict(width=0.5)
labelargs = dict(ha='center', va='baseline')
for ss in ax:
    tflux = tropflux.sel(monsoon=ss)
    if ss == 'SW':
        x0 = -1.5
    elif ss == 'SWNE':
        x0 = -0.85
    else:
        x0 = 0

    # wind stress
    scale = 0.05
    ax[ss].quiver(x0, 0, tflux.taux, tflux.tauy,
                  width=0.1, units='x', scale=scale)
    # ax[ss].quiver(0, 0, scale, scale,
    #               scale=scale, width=0.1, units='x',
    #               angles='xy', scale_units='xy')
    # ax[ss].plot(tflux.taux/scale, tflux.tauy/scale, 'kx')
    ax[ss].add_artist(mpl.patches.Ellipse((x0+tflux.taux/scale, tflux.tauy/scale),
                                          2*tflux.taux_std/scale,
                                          2*tflux.tauy_std/scale,
                                          alpha=0.1, color='k', zorder=-1))
    ax[ss].set_aspect(1)

    # near-inertial input
    ax[ss].bar(1, niw.sel(monsoon=ss)/0.5e-3, color='#31a354', **barargs)

    # netflux
    ax[ss].bar(2, tflux.heat/50, color='#d95f02', **barargs)
    ax[ss].bar(2, tflux.cool/50, color='#7570b3', **barargs)

    # precip
    ax[ss].bar(3, P.sel(monsoon=ss)/5, color='#7fcdbb', **barargs)

    ax[ss].axhline(0, color='lightgray', zorder=5)

    ax[ss].set_xticklabels([])
    ax[ss].set_xticks([])
    ax[ss].set_yticklabels([])
    ax[ss].set_yticks([])
    ax[ss].spines['left'].set_visible(False)
    ax[ss].spines['bottom'].set_visible(False)

    ylabel = -2.5
    ax[ss].text(0, ylabel, '$τ$', **labelargs)
    ax[ss].text(1, ylabel, '$Π$', **labelargs)
    ax[ss].text(2, ylabel, '$J_q^0$', **labelargs)
    ax[ss].text(3, ylabel, '$P$', **labelargs)

axx[0, 0].set_ylabel('Basin-wide\nseasonal\naverages',
                     rotation=0, va='center', ha='right')

ax[ss].set_xlim([-2, 4])
ax[ss].set_ylim([-2, 2])

for ii in range(4):
    axx[0, ii].set_title(axx[1, ii].get_title())
    axx[1, ii].set_title('')
    axx[1, ii].set_xlim([-7, -1.5])

plt.subplots_adjust(wspace=0.22, hspace=0.1)
f.set_size_inches(7, 8.5)
f.suptitle('$\\log_{10}$ hourly averaged $K_T$ (m²/s)', y=0.075)

plt.savefig('images/vert-profile.svg', bbox_inches='tight')
plt.savefig('images/paper1/bay-KT-vert-profile.pdf', bbox_inches='tight')
plt.savefig('images/bay-KT-vert-profile.png', bbox_inches='tight')
import subprocess
subprocess.run(['bash', 'add-legend-vert-profile.bash'], cwd='images/paper1/')
#+END_SRC
[[file:images/paper1/bay-KT-vert-profile-label.png]]

*** add in mean wind stress?
#+BEGIN_SRC ipython :session :results none
import bay
bay = importlib.reload(bay)

moors = ['RAMA12', 'RAMA15', 'NRL1', 'NRL2', 'NRL3', 'NRL4', 'NRL5']

# bay.make_vert_distrib_plot('KT', label_moorings=False)

if 'df' not in locals():
    df = bay.nc_to_binned_df(bins=bay.default_density_bins, moor=None)
    df['KT'] = np.log10(df['KT'])

# f = plt.figure()
# gs = mpl.gridspec.GridSpec(2, 4, figure=f, height_ratios=(1, 8))

# axx1 = []
# for ii in range(4):
#     axx1.append(f.add_subplot(gs[0, ii]))

# axx2 = []
# for ii in range(4):
#     axx2.append(f.add_subplot(gs[1, ii]))

# f, axx = plt.subplots(2, 4, gridspec_kw={'height_ratios': (1, 12)},
#                       sharey='row')
# ax = dict(zip(bay.seasons, axx[1, :]))
# bay.vert_distrib(df, df.bin,
#                  f=f, ax=ax,
#                  label_moorings=False,
#                  percentile=True)

# [aa.set_title('') for aa in axx[1, :]]

# months = {'NE': 'Dec-Feb', 'NESW': 'Mar-Apr',
#           'SW': 'Jun-Sep', 'SWNE': 'Oct-Nov'}
# [axx[0, idx].set_title(list(months.keys())[idx] + '\n' + months[mm])
#  for idx, mm in enumerate(ax)]

# # read Tropflux here
# if 'tropflux' not in locals():
#     tropflux = (xr.open_mfdataset('../datasets/tropflux/tau*_tropflux_1d_*.nc')
#                 .drop('tau')
#                 .sel(time=slice('2013-12-01', '2014-11-30'),
#                      latitude=slice(2, 25),
#                      longitude=slice(78, 96))
#                 .load())
#     tropflux = (tropflux.groupby(tropflux.time.monsoon.labels)
#                 .mean(dim='time'))

# mean_winds = tropflux.mean(['latitude', 'longitude'])
# std_winds = tropflux.std(['latitude', 'longitude'])
# for ii, ss in enumerate(bay.seasons):
#     hh = axx[0, ii].quiver(0, 0, mean_winds.sel(monsoon=ss).taux,
#                            mean_winds.sel(monsoon=ss).tauy, scale=0.3)
#     hh.set_clip_on(False)
#     hh.set_in_layout(False)
#     axx[0, ii].spines['left'].set_visible(False)
#     axx[0, ii].spines['bottom'].set_visible(False)
#     axx[0, ii].set_xticks([])
#     axx[0, ii].set_yticks([])

plt.subplots_adjust(wspace=-0.2)

# plt.savefig('images/vert-profile.svg', bbox_inches='tight')
# plt.savefig('images/paper1/bay-KT-vert-profile.pdf', bbox_inches='tight')
# plt.savefig('images/bay-KT-vert-profile.png', bbox_inches='tight')
#+END_SRC
[[file:images/bay-KT-vert-profile.png]]
** Figure 4: RAMA 12N time series

#+BEGIN_SRC ipython :session
if 'ra12' not in locals():
    ra12 = bay.read_ra12()

f, axx = plt.subplots(3, 1, sharex=True, constrained_layout=True)
f.set_constrained_layout_pads(hspace=0.001, h_pad=0)

ax12 = bay.plots.plot_moor(ra12, idepth=0, axx=axx)
ax12['jq'].set_ylim([-50, 50])
# ax12['js'].set_ylim([-1e-2, 2e-1])

flux = ra12.flux.Jq0.sel(time='2014').resample(time='D').mean('time')
ax12['flux'] = ax12['met'].twinx()
ra12.PlotFlux(ax12['flux'], flux.time.values, flux)
ax12['flux'].spines['right'].set_visible(True)
ax12['flux'].set_ylabel('Daily avg. net surface\nheat flux [W/m²]')
dcpy.plots.label_subplots(axx)

f.set_size_inches((8, 4))

f.savefig('images/paper1/rama12.pdf')
#+END_SRC
#+CAPTION:
[[file:images/paper1/rama12.pdf]]

** Figure 5: NRL time series

#+BEGIN_SRC ipython :session :results noif 'nrl5' not in locals():
if 'nrl5' not in locals():
    nrl5 = bay.read_nrl5()

shear = nrl5.interp_shear('bins')

from dcpy.plots import annotate_end, set_axes_color

f5, axx5 = plt.subplots(5, 1, sharex=True, constrained_layout=True)
f5.set_constrained_layout_pads(hspace=0.001, h_pad=0)
f5.set_size_inches((8, 7))

niw_shear = xfilter.bandpass(shear.shear, 'time',
                             freq=np.array([1/2, 2])*nrl5.inertial.values,
                             order=3, cycles_per='D')
low_shear = xfilter.lowpass(shear.shear, 'time',
                            freq=0.1, cycles_per='D', order=3)

hniw = (((niw_shear).rolling(time=7*24).reduce(dcpy.util.ms) * 1e5)
        .sel(time='2014')
        .plot(ax=axx5[-2], _labels=False, color='g', lw=1.2))
hlow = ((np.abs(low_shear.sel(time='2014'))**2 * 1e5)
        .plot(ax=axx5[-2], _labels=False, color='k', lw=1.2))
annotate_end(hlow[0], 'Low pass')
annotate_end(hniw[0], 'NIW')
hniw[0].set_clip_on(False)
hniw[0].set_in_layout(False)
nrl5.MarkSeasonsAndEvents(events=False, ax=axx5[-2])
axx5[-2].set_ylabel('Squared shear\n[$10^{-5}$ s$^{-2}$]')
axx5[-2].set_ylim([0, 6])

axnrl5 = bay.plots.plot_moor(nrl5, idepth=1, axx=axx5)
axnrl5['jq'].set_ylim([-20, 0])
axnrl5['js'].set_ylim([-1e-2, 2e-1])

# fill in the 20m gap with linear interpolation
# then interpolate velocity to CTD depths
# then difference to get shear
zinterp = nrl5.ctd.depth.isel(z=slice(1, 3))
vel_interp = (nrl5.vel[['u', 'v']].interpolate_na('depth')
              .interp(time=zinterp.time, depth=zinterp))
shear_interp = (np.hypot(vel_interp.u.diff('z')/15, vel_interp.v.diff('z')/15)
                .squeeze())

N2 = ((9.81/1025 * nrl5.ctd.ρ.diff('z')/nrl5.ctd.depth.diff('z'))
      .isel(z=1))
Ri = (N2.where(N2 > 0)/shear_interp**2).sel(time='2014')

axnrl5['ri'] = axx5[-1]
(((Ri.where(Ri < 5)).resample(time='D').count()/144)
 .plot(ax=axnrl5['ri'], label='< 10', _labels=False, color='k'))
axnrl5['ri'].set_ylabel('Fraction of day\nwith Ri < 5')
nrl5.MarkSeasonsAndEvents(events=False, ax=axnrl5['ri'])

axnrl5['input'] = axnrl5['met'].twinx()
axnrl5['input'].plot(nrl5.niw.time, nrl5.niw.true_flux*1000, color='C0')
axnrl5['input'].set_ylabel('Near-inertial input\n$Π$[mW/m²]')
# set_axes_color(axnrl5['input'], 'C0', spine='right')

dcpy.plots.label_subplots(axx5, x=0.025, y=0.83)

[tt.set_rotation(0) for tt in axx5[-1].get_xticklabels()]
[tt.set_ha('center') for tt in axx5[-1].get_xticklabels()]

f5.savefig('images/paper1/nrl5.pdf')

# shear_interp = (nrl5.vel.shear
#                 .interp(time=zpod.time, depth=zpod.isel(num=1))
#                 .interpolate_na('time'))
# axnrl5['depth'] = axx5[-1].twinx()

# (nrl5.zχpod.isel(num=1).resample(time='D').mean('time')
#  .plot.line(x='time', ax=axnrl5['depth'], color='C0'))
# set_axes_color(axnrl5['depth'], 'C0', spine='right')
# axnrl5['depth'].set_title('')

# bpshear = mooring.calc_shear_bandpass(depth=120).to_array('band')
# (bpshear.sel(time='2014').sel(band=['f0', 'M4'])
#  .rolling(time=24*5).var()
#  .plot.line(x='time', add_legend=True, ax=axx5[-1]))

# bpshear2 = nrl5.calc_shear_bandpass(depth=50).to_array('band')
# (bpshear2.sel(time='2014').sel(band='f0')
#  .rolling(time=24*5).var()
#  .plot.line(x='time', ax=axx5[-1]))

# shear = (nrl5.calc_shear_bandpass(depth=120).sel(time='2014')
#          .resample(time='D').var())

# hm2 = (shear['M2']/1e-6).plot(ax=axnrl5['shear'])
# hm4 = (shear['M4']/1e-6).plot(ax=axnrl5['shear'])
# hf0 = (shear['f0']/1e-6).plot(ax=axnrl5['shear'])
# for hh in [hm2, hm4, hf0]:
#     hh[0].set_clip_on(False)
#     hh[0].set_in_layout(False)
# _, htm2 = annotate_end(hm2[0], '$M_2$')
# _, htm4 = annotate_end(hm4[0], '$M_4$', va='top')
# _, htf0 = annotate_end(hf0[0], '$f_0$')
# # _, hiw0 = annotate_end(hiw[0], '$> f_0$', va='center')

# axra12 = plot_moor(ra12, idepth=0)
# jqd = jq0.resample(time='D').mean()
# axes['jq0'] = axra12['met'].twinx()
# ra12.PlotFlux(axra12['jq0'], jqd.time.values, jqd.values)

# # axes['shear'].set_ylim([0, 2.5])
#+END_SRC
[[file:images/paper1/nrl5.pdf]]

** Figure 6: NRL5 zoom-in

#+BEGIN_SRC ipython :session :results none
trange = slice('2014-07-25', '2014-08-07 11:59')

f, ax = plt.subplots(3, 1, sharex=True, constrained_layout=True,
                     gridspec_kw={'height_ratios': [1.5, 1, 2]})
f.set_size_inches((6.5, 5))

color = 'C0'
Jqi = (nrl5.Jq.sel(time=trange).isel(depth=1)
       .interpolate_na('time'))
Jqi[Jqi < -200] = -200
Jqi = Jqi.resample(time='30min').mean('time')
ax[0].fill_between(Jqi.time.values, Jqi.values, color=color, alpha=0.2)
hjq = (Jqi.plot.line(x='time', ax=ax[0], ylim=[-200, 0],
                  add_legend=True, color=color, lw=1))
ax[0].set_ylabel('$J_q^t$ [W/m²]')
# hjq[0].set_clip_on(False)
# hjq[0].set_in_layout(False)

(nrl5.ε.sel(time=trange).isel(depth=1).interpolate_na('time')
 .resample(time='30min').mean('time')
 .plot.line(x='time', ax=ax[1], yscale='log', ylim=[1e-11, 1e-6],
            add_legend=False, color=color, lw=1))
ax[1].set_ylabel('$ε$ [W/kg]')

f0 = nrl5.inertial/86400
shear = (nrl5.vel.uz.rolling(depth=3, center=True, min_periods=1).mean())
shear.dc.set_name_units('Zonal shear', '1/s')

(shear.sel(time=trange, depth=slice(90, 300))
 .plot.contourf(yincrease=False, cmap=mpl.cm.RdYlBu_r, ax=ax[2],
                levels=20, vmax=0.01,
                cbar_kwargs={'orientation': 'horizontal', 'shrink': 0.7,
                             'ticks': np.arange(-0.01, 0.011, 0.005)}))

hT = (nrl5.ctd['T'].sel(time=trange)
      .resample(time='H', loffset='-30min').mean('time')
      .plot.contour(levels=np.arange(17, 20.1, 2.5),
                    colors='k', yincrease=False, linewidths=0.8))
dcpy.plots.contour_label_spines(hT, prefix='T=', fmt='%.1f')

(nrl5.zχpod.sel(time=trange).isel(num=1)
 .plot.line(x='time', ax=ax[2], color='w', lw=2.5,
            add_legend=False, _labels=False))
hz = (nrl5.zχpod.sel(time=trange).isel(num=1)
      .plot.line(x='time', ax=ax[2], color='k', lw=1,
                 add_legend=False, _labels=False))
ax[2].set_xlim(trange.start, trange.stop)
dcpy.plots.annotate_end(hz[0], r'$χ$pod')

[aa.set_title('') for aa in ax]
[aa.set_xlabel('') for aa in ax]
ax[-1].set_ylabel('depth [m]')
[tt.set_rotation(0) for tt in ax[-1].get_xticklabels()]
[tt.set_ha('center') for tt in ax[-1].get_xticklabels()]
ax[-1].xaxis.set_major_formatter(mpl.dates.DateFormatter('%b-%d'))
ax[2].set_ylim([250, 90])

dcpy.plots.label_subplots(ax[:-1], x=0.03)
ax[-1].text(0.03, 0.05, '(c)', transform=ax[-1].transAxes)

harr = ax[-1].plot((np.datetime64('2014-08-01 05:00'),
                    np.datetime64('2014-08-01 17:25')),
                   (205, 205), color='k')

harr = ax[-2].plot((np.datetime64('2014-08-01 05:00'),
                    np.datetime64('2014-08-01 17:25')),
                   (2e-10, 2e-10), color='k')

ax[-2].text(np.datetime64('2014-08-01 11:00'), 1.5e-10, '$M_2$',
            ha='center', va='top')

ax[-1].text(np.datetime64('2014-08-01 11:00'), 208, '$M_2$',
            ha='center', va='top')

f.savefig('images/paper1/nrl5-aug-niw-mixing.pdf')
#+END_SRC
[[file:images/paper1/nrl5-aug-niw-mixing.pdf]]

** Figure 7: NRL scatter plots
#+BEGIN_SRC ipython :session
import cycler
import statsmodels.api as sm
from statsmodels.sandbox.regression.predstd import wls_prediction_std

timescale = "M"
if timescale == 'M':
    window = 30
elif timescale == '3W':
    window = 21
elif timescale == '2W':
    window = 15
elif timescale == 'W':
    window = 7

def _mean(variable, meanfunc, stdfunc, timescale=timescale):
    if timescale == 'M':
        window = 30
    elif timescale == '3W':
        window = 21
    elif timescale == '2W':
        window = 15
    elif timescale == 'W':
        window = 7

    resampler = variable.resample(time=timescale)
    count = resampler.count()
    out = xr.Dataset()
    out['mean'] = (resampler.apply(meanfunc)
                   .where(count/24/window > 0.5))

    out['std'] = (resampler.apply(stdfunc)
                  .where(count/24/window > 0.5))

    return out

turb = xr.open_dataset("../estimates/bay_merged_hourly.nc")

with mpl.style.context({
        'axes.prop_cycle': cycler.cycler(
            'color', ['#4C72B0', '#55A868', '#C44E52',
                      '#8172B2', '#CCB974', '#64B5CD']),
        }):
    f, axx = plt.subplots(2, 1, sharex=True, sharey=True,
                          constrained_layout=True)

ax = dict(zip(['full', 'niw'], axx))
he = list()
for estimate in ax:
    e = list()
    s = list()
    eci = list()
    labels = list()

    for mooring in [nrl4, nrl5]:
        labels.append(mooring.name)
        [full, low, high, niw, loni] = mooring.filter_interp_shear()
        full = full.shear  # TODO: fix this

        mix = (turb.sel(**bay.loc[mooring.name])
               .dropna("depth", how="all")
               .isel(depth=1))

        epsr = _mean(mix.ε, np.mean, np.std, timescale)
        shear = _mean(locals()[estimate],
                      dcpy.util.ms,
                      (lambda da: (np.abs(da**2)).std('time')),
                      timescale).interp(time=epsr.time)

        # he.append(ax[estimate].errorbar(
        #     np.log10(shear['mean']),
        #     np.log10(epsr["mean"]),
        #     xerr=(np.log10(shear['mean'] + shear['std'].values/np.sqrt(window * 24))
        #           - np.log10(shear['mean'])),
        #     yerr=(np.log10(epsr['mean'] + epsr['std'].values / np.sqrt(window * 24))
        #           - np.log10(epsr['mean'])),
        #     fmt='o', ms=3))

        he.append(ax[estimate].errorbar(
            shear['mean'],
            epsr["mean"],
            xerr=shear['std'].values/np.sqrt(window * 24),
            yerr=epsr['std'].values / np.sqrt(window * 24),
            fmt='o', ms=3))

        ax[estimate].set_xscale('log')
        ax[estimate].set_yscale('log')

        if estimate == 'niw':
            if mooring.name == 'NRL1':
                idx = [-1]
            if mooring.name == 'NRL3':
                idx = [0]
            if mooring.name == 'NRL4':
                idx = [2]
            if mooring.name == 'NRL5':
                idx = [2, 3, 10]

            ax[estimate].plot(shear['mean'][idx],
                              epsr['mean'][idx],
                              'wo', ms=2, zorder=10)
            epsr['mean'].values[idx] = np.nan


        e.append(epsr['mean'].values)
        eci.append(epsr['std'].values / np.sqrt(window * 24))
        s.append(shear['mean'].values)

        ax[estimate].set_ylabel(r'$ε$ [W/kg]')

    x = np.log10(np.hstack(s))
    idx = np.argsort(x)
    y = np.log10(np.hstack(e)[idx])
    w = np.log10(np.hstack(eci)[idx])
    x = x[idx]

    mask = np.logical_and(~np.isnan(x), ~np.isnan(y))

    wls = sm.WLS(y[mask], sm.add_constant(x[mask]),
                 weights=w[mask]**2).fit()

    # p = np.polyfit(x[mask], y[mask], 1)
    # prediction = p[0]*x_expanded + p[1]

    x_expanded = np.insert(x[mask], 0, 1.03*np.nanmin(x))
    x_expanded = np.append(x_expanded, 0.9*np.nanmax(x[mask]))
    hfit = ax[estimate].plot(10**x_expanded,
                             10**wls.predict(sm.add_constant(x_expanded)),
                             '--', color='k', lw=1, zorder=-1)
    ax[estimate].text(0.80, 0.90, '$r²$ = {0:.2f}'.format(wls.rsquared),
                      transform=ax[estimate].transAxes)
    herr = ax[estimate].fill_between(
        10**x_expanded,
        10**wls.predict(sm.add_constant(x_expanded))*3,
        10**wls.predict(sm.add_constant(x_expanded))/3,
        color='k', alpha=0.07, zorder=-1)

    # prstd, iv_l, iv_u = wls_prediction_std(wls, exog=x_expanded)
    # ax[estimate].fill_between(10**x_expanded, 10**iv_l, 10**iv_u,
    #                           color='k', alpha=0.1, zorder=-1, edgecolor=None)

axx[0].set_ylim([10**-12, 10**-6])
axx[0].set_xlim([10**-5.25, 10**-3.9])
axx[1].set_xlabel(r"mean squared shear [$s^{-2}$]")
ax['niw'].legend(handles=he[len(labels):] + hfit + [herr],
                 labels=labels+['linear fit', 'factor of 3 error in $ε$'],
                 loc='lower right')
dcpy.plots.label_subplots(axx, labels=['total shear', 'near-inertial shear'])

# f.set_size_inches([6.5, 3])
f.set_size_inches(4, 6.5)
f.savefig('images/paper1/eps-scatter.pdf', transparent=False)
#+END_SRC
** Figure 8: 8N special
#+BEGIN_SRC ipython :session
if 'trmm' not in locals():
    trmm = dcpy.oceans.read_trmm()
    # convert from mm/day to m/s
    P = (trmm.precipitation.sel(lon=slice(85, 89))
         .sel(lat=8, method='nearest').drop('lat')
         .mean('lon'))[1:-1].load() * 1e-3/86400
    P.attrs['units'] = 'm/s'
    P['time'] = P.time.dt.floor('D')

if 'oaflux' not in locals():
    oaflux = dcpy.oceans.read_oaflux()

    # convert from cm/year to m/s
    E = (oaflux.evapr.sel(lon=slice(85, 89))
         .sel(lat=8, method='nearest').drop('lat')
         .mean('lon')).load() * 0.01/365/86400
    E.attrs['units'] = 'm/s'

if 'nrl' not in locals():
    turb = xr.open_dataset('../estimates/bay_merged_hourly.nc')

    nrl = (turb[['Js', 'Jq', 'KT', 'S', 'z']]
           .sel(lat=8, drop=True)
           .sel(time='2014')
           .dropna('depth', how='all')
           .dropna('lon', 'all'))

f = plt.figure(constrained_layout=True)
f.set_constrained_layout_pads(h_pad=1/72, wspace=0.1)
f.set_size_inches(7, 6.7)
gs = f.add_gridspec(4, 1, height_ratios=[1, 1, 1, 0.5])
ax = list()
with mpl.style.context({'axes.facecolor': 'w',
                        'axes.grid': True,
                        'axes.axisbelow': False,
                        'grid.color': 'gray',
                        'grid.alpha': 1,
                        'grid.linewidth': 0.3}):
    ax.append(f.add_subplot(gs[0, 0]))
    ax.append(f.add_subplot(gs[1, 0], sharex=ax[0]))

ax.append(f.add_subplot(gs[2, 0]))
ax.append(f.add_subplot(gs[3, 0], sharex=ax[-1]))

############
# sampling #
############

time = xr.broadcast(nrl.time, nrl.S)[0]
mask = (~np.isnan(nrl.Js)).values
kwargs = dict(alpha=1,
              s=8.0,
              linewidths=0.05,
              edgecolors='k',
              norm=mpl.colors.LogNorm(vmin=1e-4, vmax=1),
              cmap=mpl.cm.gist_heat_r)

# sort so that large Js values are easily visible
isort = np.argsort(nrl.Js.values[mask].ravel())

ax[0].scatter(time.values[mask].ravel()[isort],
              nrl.z.values[mask].ravel()[isort],
              c=nrl.Js.values[mask].ravel()[isort],
              ,**kwargs)
ax[0].set_ylabel('depth [m]')
ax[0].set_ylim([150, 18])
ax[0].grid(False, axis='y')

hh = ax[1].scatter(time.values[mask].ravel()[isort],
                   nrl.S.values[mask].ravel()[isort],
                   c=nrl.Js.values[mask].ravel()[isort],
                   ,**kwargs)

hh.set_clip_on(False)
hh.set_in_layout(False)
ax[1].set_ylim((35.5, 33))
ax[1].set_yticks([33, 34, 34.5, 35, 35.5])
ax[1].set_ylabel('$S$')

ax[1].xaxis.set_major_locator(mpl.dates.MonthLocator())
ax[1].set_xticklabels([])
# ax[1].xaxis.set_major_formatter(mpl.dates.DateFormatter('%b'))
f.colorbar(hh, ax=ax[:2], extend='max', shrink=0.8, aspect=30, pad=0.0,
           orientation='vertical', label=r'hourly mean salt flux $J_s^t$')

####################
# Labelled heatmap #
####################
heatmap_kwargs = dict(
    center=0, annot=True, square=False, cbar=False, linewidths=1, fmt='.2f',
    vmin=-1.6, vmax=1.6, cmap=mpl.cm.RdYlBu_r)

df = (nrl.where(np.abs(nrl.Jq) < 1000).to_dataframe().reset_index()
      .drop(['depth', 'lon'], axis=1)
      .dropna(how='any'))

grouped = df.groupby([pd.cut(df.S, [34, 34.5, 35, 35.5]),
                      df.time.dt.month])
mean = grouped.mean()
count = grouped.count()['Js']
N = 30 * 24 # number of observations per month per instrument
count_mask = count/N > 1

sns.heatmap((mean['Js']/1025 * 1e6)
            .where(count_mask)
            .reset_index()
            .pivot('S', 'time', 'Js'),
            ax=ax[-2], **heatmap_kwargs)

cmap = dcpy.plots.cmap_params([0, 1, 2, 3, 4],
                              levels=[0, 1, 2],
                              cmap=mpl.colors.ListedColormap
                              ([[0.3, 0.3, 0.3, 1],
                                [0.6, 0.6, 0.6, 0.5],
                                [0.3, 0.3, 0.3, 0],]))
sns.heatmap((count / N).where(count_mask)
            .reset_index()
            .pivot('S', 'time', 'Js'),
            ,**cmap, ax=ax[-2], cbar=False, zorder=10,
            linewidths=heatmap_kwargs['linewidths'])
ax[-2].set_xlabel('')
ax[-2].set_ylim([3, -1])
ax[-2].tick_params('both', length=0)
ax[-2].set_yticks([0.5, 1.5, 2.5])
ax[-2].set_yticklabels(['34.25', '34.75', '35.25'])
ax[-2].set_xticks(np.arange(1, 13) - 0.5)
ax[-2].set_ylabel('$S$')

sns.heatmap(((E-P.interp(time=E.time)).sel(time='2014')
             .groupby('time.month').mean('time')
             .to_dataframe(name='E-P')
             .transpose()) * 32 * 1e6,
            ax=ax[-1], **heatmap_kwargs)
ax[-1].xaxis.set_tick_params(length=0)
ax[-1].yaxis.set_tick_params(length=0)
ax[-1].set_yticks([])

dcpy.plots.label_subplots(ax, x=0.03, y=0.8,
                          labels=['', '',
                                  '$ρ_0^{-1}$ $J_s^t$ [$10^{-6}$ m/s]',
                                  '$S_0 (E-P)$ [$10^{-6}$ m/s]'])

plt.setp(ax[0].xaxis.get_ticklabels(), visible=False)
plt.setp(ax[2].xaxis.get_ticklabels(), visible=False)
ax[0].set_xlim(['2014-01-01', '2015-01-01'])
ax[2].set_xticklabels([])
ax[-1].set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',
                        'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
ax[-1].set_xlabel('2014')
ax[-1].set_ylabel('')
ax[-1].set_ylim([0, 2])

f.savefig('images/paper1/8N-binned-avg-js-ep.png', bbox_to_inches='tight')
#+END_SRC
